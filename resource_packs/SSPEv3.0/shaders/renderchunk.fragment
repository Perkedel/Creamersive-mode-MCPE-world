// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture

// SSPE BY @RyFol
// USE OF ANY CODE IS NOT PERMITTED

#if __VERSION__ >= 300

	// version 300 code

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif

	#define varying in
	#define texture2D texture
	out vec4 FragColor;
	#define gl_FragColor FragColor
#else

	// version 100 code

	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif


varying vec4 color;

#ifdef FOG
varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
varying float cameraDist;
#endif

#include "shaders/util.h"

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform sampler2D TEXTURE_2;

#define enableTonemapping
#define saturation 2.3
#define exposure 1.0
#define brightness 1.0
#define gamma 2.5
#define contrast 1.87

float filmic_curve(float x) {

// Shoulder strength
float A = 0.22;
// Linear strength
float B = 0.3;
// Linear angle
float C = 0.15 * brightness;
// Toe strength
float D = 0.4 * gamma;
// Toe numerator
float E = 0.01 * contrast;
// Toe denominator
float F = 0.1;

return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;

}

vec3 doTonemapping(vec3 clr) {

float W = 1.3 / exposure;

#ifdef enableTonemapping

float Luma = dot(clr, vec3(0.0, 0.3, 0.3));
vec3 Chroma = clr - Luma;
clr = (Chroma * saturation) + Luma;

  clr = vec3(filmic_curve(clr.r), filmic_curve(clr.g), filmic_curve(clr.b)) / filmic_curve(W);
#endif

return clr;
}


void main()
{

#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
#endif

	vec4 inColor = color;
	vec3 torchl = vec3(0.8,0.27,0.08);
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
	inColor.b = 1.0;
#endif

#ifdef ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05;
	#else
		float alphaThreshold = .5;
	#endif

	if(diffuse.a < alphaThreshold)
		discard;
#endif

	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );

#ifndef SEASONS

#if !defined(ALPHA_TEST) && !defined(BLEND)
	diffuse.a = inColor.a;
#elif defined(BLEND)
	diffuse.a *= inColor.a;
	#ifdef NEAR_WATER
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
	#endif
#endif	
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

float s_amount = 0.0;
float nolight = (1.0 - uv1.x);

if(uv1.y < 0.875){s_amount = 0.05;}
if(uv1.y < 0.874){s_amount = 0.10;}
if(uv1.y < 0.873){s_amount = 0.15;}
if(uv1.y < 0.872){s_amount = 0.20;}
if(uv1.y < 0.871){s_amount = 0.25;}
if(uv1.y < 0.870){s_amount = 0.30;}
if(uv1.y < 0.869){s_amount = 0.35;}
if(uv1.y < 0.868){s_amount = 0.40;}
if(uv1.y < 0.867){s_amount = 0.45;}

vec3 shadowColor = vec3(0.0);

diffuse.rgb = mix(diffuse.rgb, shadowColor.rgb, s_amount * nolight);

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif
      diffuse.rgb += torchl*max(0.0,uv1.x-0.5);
     diffuse.rgb = doTonemapping(diffuse.rgb);
	gl_FragColor = diffuse;

#endif // BYPASS_PIXEL_SHADER
}
